@using VRT.Resume.Application.Persons.Queries.GetPersonEducation;
@model PersonEducationInListVM[]


@{
    var eduList = Model == null
        ? new PersonEducationInListVM[0]
        : Model.OrderByDescending(o => o.FromDate).ThenByDescending(o => o.ToDate).ToArray();
}

@await Html.PartialAsync("_AddToolbar", new EditDeleteToolbarData("PersonEdu", 0, TabNames.Education))

<div class="d-flex flex-wrap">
    @foreach (var m in eduList)
    {
        <div class="card mb-2 w-100 shadow">
            <div class="card-body m-0">
                <div class="d-flex text-nowrap border-bottom mb-2 mr-auto align-content-around">
                    <span class="h4 text-wrap flex-grow-1">@m.SchoolName</span>
                    @await Html.PartialAsync("_EditDeleteToolbar", new EditDeleteToolbarData("PersonEdu", m.EducationId))<br />
                </div>
                <div class="mb-2">
                    <span class="h7 text-muted">@m.AsTimeRange()</span><br />
                </div>                
                @await Html.PartialAsync("_EduTabCardItem", Tuple.Create(m.Field, LabelNames.Field))
                @await Html.PartialAsync("_EduTabCardItem", Tuple.Create(m.Degree, LabelNames.Degree))
                @await Html.PartialAsync("_EduTabCardItem", Tuple.Create(m.Specialization, LabelNames.Specialization))
                @await Html.PartialAsync("_EduTabCardItem", Tuple.Create(m.ThesisTitle, LabelNames.ThesisTitle))
                @await Html.PartialAsync("_EduTabCardItem", Tuple.Create(m.Grade, LabelNames.Grade))               
            </div>
        </div>
    }
</div>
